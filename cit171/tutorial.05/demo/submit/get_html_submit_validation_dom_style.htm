<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>GET Example with HTML Submit Button DOM Style</title>

<script type="text/javascript">
// this javascript example will trap the submit button and validate the form input Document Object Model DOM) style

/* add an event that will run the user defined function named "initialize" when the web page is loaded by the web browser.
when the "initialize" function is called it adds two events, one  event to trap the submit button and the other is to trap the reset button
the end result is that when the submit button is clicked the user defined function named "validateForm" is run, 
and when the reset button is clicked the user defined function named "resetTextColor" is run */
addEvent(window, "load", initialize);

/* there are two events that have been added to this web page:
1) the first event is "load", and it runs a user defined function named initialize when the web is loaded by the web browser.
2) the second event is "submit", and it will run a user defind function named validateForm when the form is submitted
Note that we manually add the "load" event at the end of the <head> javascript code, and that the "load" event adds the "submit" event. */
function addEvent(objectHandle, eventName, functionName) {
	// declare variable
	var returnValue;
	
	if (objectHandle.addEventListener) {
		// web browsers other than microsoft internet explorer
		// note that addEventListener doesn't have a return value
		objectHandle.addEventListener(eventName, functionName, false);
		return true;
	}
	else if (objectHandle.attachEvent) {
		// microsoft internet explorer
		returnValue = objectHandle.attachEvent("on" + eventName, functionName);
		return returnValue;
	}
	else {
		alert("Unable to add event.");
		return false;
	}
}

function initialize() {
	// declare variable
	var formHandle;

	// get a reference to the web page form
	formHandle = document.getElementById("myForm");
  
	// add an event to the form that run a user defined function named validateForm when the user clicks the submit button
	addEvent(formHandle, "submit", validateForm);
  
	// add an event to the form that run a user defined function named  "resetTextColor" when the user clicks the reset button
	addEvent(formHandle, "reset", resetTextColor);
}

function validateForm(objectEvent) {
	// declare variables
	var firstNameHandle;
	var firstNameValue;
	var lastNameHandle;
	var lastNameValue;
	var validFormInput;
	var errorMessage;

	// assume the form input is all valid
	validFormInput = true;

	// initialize error message
	errorMessage = "";

	// get a reference to the text box on the Web page
	firstNameHandle = document.getElementById("firstName");
	lastNameHandle = document.getElementById("lastName");

	// get the contents of the text box into a variable
	firstNameValue = firstNameHandle.value;
	lastNameValue = lastNameHandle.value;

	// check if the user input was blank (a zero length string)
	if (firstNameValue == "") {
		if (errorMessage.length > 0) {
			errorMessage = errorMessage + "\n";
		}
		errorMessage = errorMessage + "First Name Missing";
		document.getElementById('firstNameLabel').style.color="red";
		validFormInput = false;
	}
	else {
		document.getElementById('firstNameLabel').style.color="black";
	}

	if (lastNameValue == "") {
		if (errorMessage.length > 0) {
			errorMessage = errorMessage + "\n";
		}
		errorMessage = errorMessage + "Last Name Missing";
		document.getElementById('lastNameLabel').style.color="red";
		validFormInput = false;
	}
	else {
		document.getElementById('lastNameLabel').style.color="black";
	}
	
	if (validFormInput == true) {
		// no error
		alert("no error");	
	}
	else {
		// error was found
		alert(errorMessage);
		
		/* You can check whether an event can be canceled with the cancelable property in Opera and Safari. 
		Although the cancelable property exists in Firefox, it always returns true, regardless of the cancelable state of the event. 
		There is no way to determine whether an event can be canceled in Internet Explorer. */
		
		/* If an event is cancelable, you can use the preventDefault method and the returnValue property to cancel the event. 
		When an event is canceled, the default action that belongs to the event will not be executed. 
		For example, when the onclick event (the onclick event is cancelable) is canceled for a checkbox, then clicking on the checkbox does not change its checked state.
		Note that the use of the preventDefault method and the returnValue property on a non-cancelable event does not cause an error. 
		When an event handler returns false, the event will be canceled. You can use it instead of the preventDefault method and the returnValue property.  
		reference: http://help.dottoro.com/ljwolcsp.php  */
		
		if (objectEvent.cancelable === undefined) {
			// microsoft internet explorer - the event is probably canceled
			// send back a return value of false  (using preventDefault with i.e. causes a JavaScript error)
			objectEvent.returnValue = false;
		}
		else {
			// note that in Firefox, the cancelable property always returns true 
			// so the cancelable state of the event cannot be determined
			if (objectEvent.cancelable) {
				// firefox, opera, and safari - the event is  canceled
				objectEvent.preventDefault ();
			}
			else {
				alert("The event is not cancelable.");
			}
		}
	}
}

function resetTextColor() {
	// declare variables
	var firstNameHandle;
	var lastNameHandle;

	// get a reference to the text box on the Web page
	firstNameHandle = document.getElementById("firstName");
	lastNameHandle = document.getElementById("lastName");

	// change the color of the input box descriptions back to black
	document.getElementById('firstNameLabel').style.color="black";
	document.getElementById('lastNameLabel').style.color="black";
}
</script>

</head>
<body>

<h1>GET Example with HTML Submit Button with Validation DOM Style</h1>
<p>After you click the Submit button look to see how the form data was passed as a query string in the Web browser address bar.</p> 

<!-- 
note that the  form's method attribute contains the "get" value. 
note also that there is no "onsubmit" attribute here -->
<form id="myForm"
      action="form_processor.htm" 
      method="get"
      enctype="application/x-www-form-urlencoded">

<!--
IMPORTANT: note that you must have the name attribute here in the input tag for the
querystring to be passed when the submit button is clicked. if you don't give your 
input box a name the value will not be passed when the form is submitted -->
<span id="firstNameLabel">firstName:</span>&nbsp;
<input type="text" name="firstName" id="firstName" value="Santa" />
<br>
<span id="lastNameLabel">lastName:</span>&nbsp;
<input type="text" name="lastName" id="lastName" value="Claus" />
<br>

<!-- note that we are submitting this form using the HMTL submit button -->
<input type="submit" />
<input type="reset" />

</form>

</body>
</html>